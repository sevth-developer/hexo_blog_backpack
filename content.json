{"pages":[{"title":"","text":"2020-04-10 电脑壁纸分享 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/album/"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://sevth.com/img/avatar.jpeg 网站名称：sevth的小破站 网站地址：https://sevth.com 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/friend/"},{"title":"","text":"个人简介以前就很喜欢一本叫做 《哑舍》的书，里面的一些经典语录真的很喜欢： 不相见便可不相识，不相识便可不相知，不相知便可不相思。 只有喜欢说谎话的人，才会怀疑别人说的话是真是假。 因为我明白了，失去的东西，其实从来未曾真正属于我，我不会追悔，也不必惋惜。 舍得，有舍才有得。 也就是说，想要的到什么，就必须舍弃什么。 其实当站在人生岔路口的时候，每个人都会做出最终抉择。 … 历程 这几年里，在不断的学习中，越来越喜欢编程，喜欢那种写完立马执行出结果的感觉，喜欢解决 BUG 后成功运行的感觉，喜欢自己帮他人解决问题时被称赞的成就感。 在几年前还是个初中生的时候，就从网上买了一本 《C++ Prime Plus》回来，当然，那时的我根本看不懂这些高级编程语言，如果说会，那一定是 Hello Word! 。 后来想搭建网站，就接触了很多的 PHP，就对这一门编程语言有了比较多的了解。那是在我高中的时候，网上免费空间泛滥，那时候就到处申请免费空间，然后搭建各种 PHPCMS,其实做一个网站也没有什么特定的用途，就是喜欢折腾罢了。(现在也一如既往，只是折腾的东西也慢慢变得深入了) 然后近些年 学习了 Python、NodeJS 这些，通过一些其他的编程语言，也明白了很多编程的思想，使自己收获更多，这就是所谓的 1+1&gt;2 叭。 关于这个博客的一些想法及说明 第一、就是记录自己折腾，探索，学习的一个过程。很多东西不记录，就容易忘记，等到需要时，找起来又麻烦。 第二、给同样喜欢折腾，探索，学习的你，提供一些帮助，重复踩坑可不是什么好事情。 第三、让自己的花费的时间边得更有价值。(缘由如上) 第四、网站托管在阿里云的服务器上，并且使用了CDN加速，完全不用担心访问速度的呢。后续会同步上传到 github 上做镜像备份，也就不存在丢失页面的问题啦！ 第五、如果网站内一些文章附带资源文件，大部分都会使用的 OSS+CDN(对象存储+云分发) 的模式。(下载速度杠杠的呢，所以为了避免产生额外的下行流量，请尽量不使用迅雷等软件下载哦~) -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 个人信息：物联网应用技术神秘职业野生Coder一枚坚信代码改变世界 博客信息 网站采用的Icarus主题修改版 By removeif 追求尽可能的简洁，清晰，易用。 在原主题之上进行了部分修改。 更新日志：–2020.04.08：去除 GitTalk 使用更简易方便的 Valine评论插件 本站推荐索引 暂无 计划 2020计划 2020.04.08 *2020 Page-counter * 制作类似不蒜子的网页计数器 时间轴记录","link":"/about/"},{"title":"音乐歌单收藏","text":"温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/"}],"posts":[{"title":"如何优雅地用shell快速创作并发布","text":"他来了他来了，他带着新造的东西过来了。(每天熬夜肝代码是不好的行为习惯，我决定，明天一定要早点睡！！!) 今天写的东西是一个shell，其实就是hexo 的一个辅助工具，之前每次写文章都要打开终端，然后 cd到路径再 hexo new post,然后又要从finder 打开一层一层的文件夹用typora 打开后才能开始写作。发布的时候，又要重复前面的两步，真的是烦得很，虽然官方给了cli 工具已经够方便了，But 我就是喜欢偷懒。 简介 优雅，快速，无残留 虽然是用我一个晚上的时间速成写的，但是功能还是很ok的，目前只在我的mac实验了正常工作，对于其他 linux 并未作测试，当然， windows更加不能用。如果有需求的话，再考虑叭。 可拓展 扩展是基于官方的 cli 工具，也就是功能可以随着官方工具而扩展，但是目前只加入了我认为必要的一些功能，其他的正常使用时都鸡肋(我使用的时间觉得鸡肋)的功能肯定是没有的。 命令简单 没有花里胡哨的东西，你完全可以打简写快速执行一些操作，比如官方中有的 hexo s 也许可以加入组合功能？比如 hexo g -d。 功能 看图，使用h 或者 help 参数可以查看，目前基本支持的就这几个。功能与官方一致，说到这，有人就要问了，既然功能一致，那它有啥用？ 快速创建新文章在命令行里直接回车就行了，或者配置好后，在桌面直接双击运行。运行后它长这样： 这里直接新建文章操作，实际上你可能只需要输入一个文章标题，其他的shell 会自动配置好。 信息确认为了不让你多输几个字，所以默认只有数据回显，并不进行数据确认。 如下： 快速写作基本上新建文章完成了之后会自动用 typora 打开。当然，如果你用其他的软件写作，那么它打开的就是你写作使用的默认软件了。 等待发布是的，它会在后台静静的等待你写作完成，然后问你要不要直接发布出去文章。前提是你已经配置好了 Hexo 的 deploy 配置。(预留坑位，配置hexo同时发布到git 和 rsync) 使用 下载脚本 github 1curl -o hexo https://raw.githubusercontent.com/sevth-developer/tools/master/shell/hexo.command &amp;&amp; chmod +x ./hexo 本站 1curl - o hexo https://cdn.sevth.com/website/2020/04/16/282d18cf0e254da3d7c389b7c5854886.command &amp;&amp; chmod +x ./hexo 编辑默认 hexo 文件夹设置。 1sed -i \"\" \"s:/Users/sevth/workspace/sevth:/Path/to/you/folder:g\" ./hexo 这里替换时，将 /Path/to/you/folder 换成你的博客文件夹根目录，尾部不带 / ，然后执行上面这条命令即可。或者你也可以使用文本编辑器打开，手动修改 base_path=为你的文件夹地址。 或者你也可以手动下载脚本文件，如下，请右键另存为。 附件下载：hexo 反馈 直接在本文下面留言 在 github 上提交issues","link":"/technology/shell/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E7%94%A8shell%E5%BF%AB%E9%80%9F%E5%88%9B%E4%BD%9C%E5%B9%B6%E5%8F%91%E5%B8%83.html"},{"title":"自制极简网页计数器","text":"因为懒，不想写过说明，直接从 github 上 copy 过来了，将就着看吧，因为是使用的 Dom 监听事件，所以，是不支持 Pjax 了，再然后，有一点小小的失误，里面用了箭头函数，也就是低版本的浏览器兼容性没做，改天有空再修改一下吧。 关于后台程序，有空会整理出来，最后，我只是一个小菜鸟，写的并不好。 counter_js使用 Lumen 作为后端开发的简易网页计数器，用于支持 Hexo 博客的 uv、pv统计。 浏览器支持 Latest ✔ Latest ✔ Latest ✔ Latest ✔ Latest ✔ 快速使用在 head 中添加 script 标签： 1&lt;script src=&quot;https://cdn.sevth.com/website/counter_js/counter.min.js&quot;&gt;&lt;/script&gt; 数据说明返回数据引入 script 后，将返回四个数据： 123456callback({site_pv:12 //站点总访问量site_uv:4 //站点访问人次page_pv:6 //当前页面访问量version:1.0 //版本号}) 其中 site_pv 将自动填入页面中 id 为 counter-site-pv 的容器中，site_uv 将自动填入页面中 id 为 counter-site-uv 的容器中，page_pv 将自动填入页面中 id 为 counter-page_pv 的容器中。 version 暂时没有其他作用。 配置12345&lt;script&gt; window.counter_config = { strict: true //启用严格uv统计模式 }&lt;/script&gt; 这个开关的作用就是在统计 uv 时更严格。统计的原理是首次访问时将写入一个检测 cookie ，未开启时，每过24h，旧用户将按照新用户计入 uv ，也就是cookie将在24h后删除，再次访问就相当于一个新用户了，开启严格模式后，用户在24h内访问一次，将刷新cookie 时间。按访问自然人统计。 注意：该配置默认是关闭的 实例12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; window.counter_config = { strict: true } &lt;/script&gt; &lt;script src=\"https://cdn.sevth.com/website/counter_js/counter.min.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt;总人数：&lt;span id=\"counter-site-uv\"&gt;99+&lt;/span&gt;&lt;br&gt;此页面访问量：&lt;span id=\"counter-page-pv\"&gt;99+&lt;/span&gt;&lt;br&gt;本站总访问量：&lt;span id=\"counter-site-pv\"&gt;99+&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; webpack 打包 克隆仓库 1git clone https://github.com/sevth-developer/counter_js.git 进入目录并安装依赖 1cd ./counter_js &amp;&amp; npm install 打包文件 1npm run build 打包完成后会在 dist 目录生成打包好的文件。 计划 访问热度页面统计接口 因为页面 url 经过base64编码后，字符长度超了，所以改用sha1 那么，就没办法做统计了。 警告 为推进互联网从 http 过渡到 https ，默认提供的加载地址仅支持 https 方式访问，如果有特殊需要，请自行下载文件引入。 支持 Issues sevth的小破站 [sevthdev@gmail.com](","link":"/develop/javascript/%E8%87%AA%E5%88%B6%E6%9E%81%E7%AE%80%E7%BD%91%E9%A1%B5%E8%AE%A1%E6%95%B0%E5%99%A8.html"},{"title":"如何配置hexo的deploy同时发布到GitHub和rsync","text":"配置 deploy 快速发布，免去手动上传的烦恼。 配置多个 deploy 同时发布，作镜像备份。 配置deploy到GitHub新建一个仓库 登录到GitHub页面，没有账号的话就注册一个。点击加号新建一个仓库 仓库名称按你自己喜欢填，如果你想访问的时候不带子目录的话，这里仓库名称应设置为 username.github.io ，将 username 替换成你的 github 用户名。然后其他保持默认，点绿色的按钮创建。 将刚刚创建的 仓库 的 HTTPS地址 复制下来并保存。 hexo配置 安装 deploy 插件 1npm install hexo-deployer-git --save 打开 hexo 项目根目录，打开并编辑 _config.yml 文件 请直接找到的底部，填入如下几个信息，注意缩进保持一致！ 12345deploy:- type: git #类型 repo: https://github.com/sevth-developer/sevth-developer.github.io.git #仓库地址，即刚刚复制的那个链接 branch: master #默认分支，写一样就好 message: 'update article' #默认提交信息，自己随意写 输入命令 hexo g -d 提交一次，不出意外的话，系统会弹出提示框让你输入 github 的账号密码，记得点保存。如果没有提示，那么检查系统内 git 是否安装。(文末附windows版下载地址，其他系统请用命令行安装) 如果发布成功，命令行最后应该会显示 deploy git done字样。 进入github仓库检查是否有数据。 配置 GitHub page 进入仓库页面，点击顶栏的 Settings 按钮进入仓库设置。 页面往下拉找到 github page 选项 一般配置的如果是这种域名仓库的形式，会自动打开这个配置选项。如果没有打开，手动打开一下就行了。 自定义域名设置 如果你有自己的域名，可以在 Custom domain 里面填入自己的域名。 github 将在你的页面仓库根目录创建一个 CNAME 文件，你可以将这个文件下载下来，或者参照里面的内容自己写一个。 在你自己的 域名DNS提供商，创建一条cname记录，指向地址为 &lt;user&gt;.github.io (你的仓库github page域名) 等待解析生效，即可使用自定义域名访问。 如何避免每次发布时 CNAME 文件丢失 将CNAME 放到对应主题目录下的 source文件夹内。 这样每次hexo解析的时候都会将 CNMAE 文件带上，deploy 也不成问题了。 安装 插件 1npm install hexo-generator-cname --save 之后在 _config.yml 文件中 Plugins 添加一条记录： 12Plugins:- hexo-generator-cname Tips: 记得在配置文件中设置一下网站的 url，否则生成的文件域名可能有误，导致无法使用自定义域名访问。 配置deploy到rsync服务器配置 安装rsync服务 1sudo apt-get install rsync 编辑配置文件 (根据别人博客上的参考，hexo集成的rsync仅仅是使用了ssh底层传输) 1sudo vim /etc/rsymcd.conf 配置文件输入如下内容： 12345678uid = nobodygid = nobodyport = 873 #不会使用到这个端口号，防火墙可以屏蔽它use chroot = nomax connections = 10pid file = /var/run/rsyncd.pidlock file = /var/run/rsync.locklog file = /var/log/rsyncd.log 启动服务 1sudo rsync --daemon hexo配置 安装集成插件 1npm install hexo-deployer-rsync --save 编辑 _config.yml 配置文件，填入如下类似信息： 123456789deploy: type: rsync host: 服务器host user: ssh用户名 root: 你的站点根目录 port: 22 #ssh端口号 delete: true #发布时是否删除旧文件 verbose: true #发布时显示详细的信息 ignore_errors: false #发布时忽略错误 测试一下，使用 hexo d 看看是否能够发布成功。 使用公钥发布，避免输入密码 服务器配置秘钥连接 SSH 参考 将能够正确连接 SSH 的秘钥写入系统默认配置中。默认系统秘钥文件地址在 ~/.ssh/id_rsa 你可以手动复制秘钥内容至该文件内，或者使用如下方式： 12cat /path/to/private_rsa &gt; ~/.ssh/id_rsa #将前面修改为你自己的秘钥文件保存地址，该操作将覆盖id_rsa文件内容，如果你在此步骤之前已经存在该文件，请注意备份保存chmod go-rwx ~/.ssh/id_rsa #设置权限 好了，全部配置完成后，你可以试验一下看看是否正常。 配置同时发布编辑 _config.yml 文件，按照如下格式填写： 1234567891011121314deploy:- type: rsync host: ip user: 用户名 root: 站点根目录 port: 22 delete: true verbose: true ignore_errors: false- type: git repo: 你的仓库地址 branch: master message: 'update article' 测试一下。 附件下载 Git-2.26.1-64-bit 参考阅读 Github Page 自定义域名官方说明 将Hexo部署到 GitHub Pages Hexo 一键部署 hexo使用rsync部署发布 设置 SSH 通过密钥登录","link":"/technology/website/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEhexo%E7%9A%84deploy%E5%90%8C%E6%97%B6%E5%8F%91%E5%B8%83%E5%88%B0GitHub%E5%92%8Crsync.html"},{"title":"网站运行时间纠错(Date的不一样用法)","text":"为了使网站引用的js代码更加规范，在对文件的整理过程中，发现了一个小小的 Bug ，网站底部的运行时间在分钟上居然差了几分钟，本着严谨的态度，开始了排错。 问题发现网站运行时间 本地时间 因为采用的开始计数时间是整点，那么计算的运行时间应该也是跟我们的本地时间相同的时间点。但是实际上相差了13分钟。 排错定位到问题点F12 打开浏览器的控制台,使用鼠标工具直接选中运行时间一行，显示为如下： 123456&lt;span&gt;&lt;script type=\"text/javascript\" src=\"/js/statistics.js\"&gt;&lt;/script&gt;&lt;script&gt;var now = new Date();setInterval(\"createTime('2020/04/08 00:00:00')\", 250,\"\");&lt;/script&gt;&lt;span id=\"statistic-times\"&gt;❤️本站自&lt;span&gt;&lt;strong&gt; 2020.04.08&lt;/strong&gt;&lt;span&gt; 已运行 &lt;strong&gt;7&lt;/strong&gt; 天 &lt;strong&gt;13&lt;/strong&gt; 小时 &lt;strong&gt;34&lt;/strong&gt; 分 &lt;strong&gt;48&lt;/strong&gt; 秒！❤️&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt; 主要分为两部分，上部分 script 使用定时器不停地调用函数，下面部分是 id 为 statistic-times 的文本标签。上面的脚本将数据插入到下面的文本标签中。 接下来，打开引入的 js 文件看一看。 12345678910111213141516function createTime(time) { var n = new Date(time); now.setTime(now.getTime() + 250), days = (now - n) / 1e3 / 60 / 60 / 24, dnum = Math.floor(days), hours = (now - n) / 1e3 / 60 / 60 - 24 * dnum, hnum = Math.floor(hours), 1 == String(hnum).length &amp;&amp; (hnum = \"0\" + hnum), minutes = (now - n) / 1e3 / 60 - 1440 * dnum - 60 * hnum, mnum = Math.floor(minutes), 1 == String(mnum).length &amp;&amp; (mnum = \"0\" + mnum), seconds = (now - n) / 1e3 - 86400 * dnum - 3600 * hnum - 60 * mnum, snum = Math.round(seconds), 1 == String(snum).length &amp;&amp; (snum = \"0\" + snum), document.getElementById(\"statistic-times\").innerHTML = \"❤️本站自&lt;span&gt;&lt;strong&gt; \"+time.split(\" \")[0].replace(/\\//g,\".\")+\"&lt;/strong&gt;&lt;span&gt; 已运行 &lt;strong&gt;\" + dnum + \"&lt;/strong&gt; 天 &lt;strong&gt;\" + hnum + \"&lt;/strong&gt; 小时 &lt;strong&gt;\" + mnum + \"&lt;/strong&gt; 分 &lt;strong&gt;\" + snum + \"&lt;/strong&gt; 秒！❤️\";} 貌似代码写的都没啥问题，但是有点杂乱。并且发现一个小问题。 now 给的值是一个全局常量，并没有重新获取。然后发现产生的原因居然是，浏览器窗口被缩小之后，网页上的js 自然而然不再运行。 解决最简单的办法就是在函数运行的时候，每次都重新取 now 值。 123456function createTime(time) { var n = new Date(time); let now = new Date(); //添加此条到函数内部 now.setTime(now.getTime() + 250), ...以下省略} 优化写法感兴趣的话，研究一下 Data 的用法，我们可以将函数简化如下： 12345function SiteTimeFrom(time) { let diffTime = new Date( new Date() - new Date(time)); let day = Math.floor(diffTime / 24 /3.6e6); document.getElementById(\"statistic-times\").innerHTML = \"❤️本站自&lt;span&gt;&lt;strong&gt; \"+time.split(\" \")[0].replace(/\\//g,\".\")+\"&lt;/strong&gt;&lt;span&gt; 已运行 &lt;strong&gt;\" + day + \"&lt;/strong&gt; 天 &lt;strong&gt;\" + diffTime.getUTCHours() + \"&lt;/strong&gt; 小时 &lt;strong&gt;\" + diffTime.getUTCMinutes() + \"&lt;/strong&gt; 分 &lt;strong&gt;\" + diffTime.getUTCSeconds() + \"&lt;/strong&gt; 秒！❤️\";} tips使用 Date(dateTime) 之类的写法，相当于 Date().parse(dataTime)。那么当我们将差值传进去构造一个 Date 对象时，它的时间就是从 1970/01/01 00:00:00 开始计算的。那么一天内的时间我们可以通过方法从该对象中获取，而天数计算仍然使用时间差算法，也就是 timestamp 除以 一天的 24 * 3.6e6 秒。 注意： 获取小时的时候，应该用 UTC 的小时，不然 Date 对象会自动转换为本地时间，那么取值的时候就会相差8h。而分钟和秒都是一样的，使不使用 UTC 时间都行。(getMinutes()、 getSeconds())","link":"/technology/javascript/%E7%BD%91%E7%AB%99%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E7%BA%A0%E9%94%99(Date%E7%9A%84%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%94%A8%E6%B3%95).html"},{"title":"如何使你的手机chrome浏览器自适应网站的夜间模式","text":"啰里啰嗦 Mac 电脑系列在比较早(10.14 mojave)的时候就有了 深色模式 ，这个模式在晚上使用的感觉是更加棒，以至于我现在任何时候都开着这个模式使用。当然，这个模式确实能够节能一些，但是并没有护眼的效果。所以，它仅仅是让你的眼睛看着舒服一些。当然，黑色的界面也显得很酷😎。 一些废话网站加入了夜间模式，当设置的时间到了之后，就会自动切换到夜间模式，使夜间浏览起来更舒适，那么，怎么让浏览器被动的跟着变黑呢？ 关键位置网站页面的 head 部分就是用来描述页面和加载一些脚本文件的。自从 chrome 39开始，chrome 浏览器支持网页中名为 theme-color 的 meta 标签。只要设置这一个标签，浏览器会随着设置的值改变标签栏的颜色。 类似的代码如下： 1&lt;meta name=\"theme-color\" content=\"#FFFFFF\"&gt; 修改定位到我们网站的切换深夜模式的代码： 12345678910function applyNight(value) { if (value == 'true') { document.body.className += ' night'; nightIcon.className = nightIcon.className.replace(/ fa-moon/g, '') + ' fa-sun'; } else { document.body.className = document.body.className.replace(/ night/g, '') nightIcon.className = nightIcon.className.replace(/ fa-sun/g, '') + ' fa-moon' }}//省略一堆代码，此处仅实例，单独使用无效 核心代码就是判断传入值是否为真，这里传入的值是夜间模式的判断。因为 夜间模式的实现主要是依靠 css 的 !important 语法覆盖实现的，所以这里就只需要添加 .night 就可以了。 那么我们综合分析一下，这个应该插入到 if 循环中去。 原生 js 操作如下： 12var c = document.getElementsByName('theme-color');c[0].content = \"#151313\"; getElementsByName 方法返回的是一个数组，这里直接取下标 0 ，完整示例如下： 12345678910111213var nightIcon = document.getElementById('night-icon');var chrome_color = document.getElementsByName('theme-color');function applyNight(value) { if (value == 'true') { document.body.className += ' night'; nightIcon.className = nightIcon.className.replace(/ fa-moon/g, '') + ' fa-sun'; chrome_color[0].content = &quot;#151313&quot;; //切换夜间模式 设置颜色值 } else { document.body.className = document.body.className.replace(/ night/g, '') nightIcon.className = nightIcon.className.replace(/ fa-sun/g, '') + ' fa-moon'; chrome_color[0].content = &quot;#FFFFFF&quot;; //切换回日间模式 设置颜色值 }} 其他受支持的一些属性12345678// windows phone&lt;meta name=\"msapplication-navbutton-color\" content=\"#FFF\"&gt;// ios safari&lt;meta name=\"apple-mobile-web-app-status-bar-style\" content=\"#FFF\"&gt;//浏览器卡片页图标&lt;link rel=\"apple-touch-icon\" href=\"/img/favicon.png\"/&gt; //apple&lt;link rel=\"icon\" sizes=\"192x192\" href=\"/img/favicon.png\"/&gt; //android 待后面整理完成了相关的文件，会将代码上传到GitHub上。 参考阅读 https://developers.google.com/web/updates/2014/11/Support-for-theme-color-in-Chrome-39-for-Android","link":"/technology/website/%E5%A6%82%E4%BD%95%E4%BD%BF%E4%BD%A0%E7%9A%84%E6%89%8B%E6%9C%BAchrome%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E9%80%82%E5%BA%94%E7%BD%91%E7%AB%99%E7%9A%84%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F.html"},{"title":"Mac小技巧：更新失败怎么当做什么都没有发生过","text":"这篇文章仅针对于黑苹果用户，如果是白苹果，应该也是可以这么做的，本文仅提供参考，给一台非mac机器装上Mac OS系统称为黑苹果(hackintosh)，虽然这违反了苹果公司的最终用户许可协议(EULA)，但是这是一种极客体验的方式。我不推荐这么做，并且最终选择权在你手中。 系统更新失败怎么办？启动界面多了一个烦人的图标？ 起因最近 Mac 推送了2020-002 更新 手贱点了更新按钮，然后开机的时候一直卡着进度条没动，只好重启电脑重新进系统，然而这个启动选项可是一直都在，真是讨厌😠。 参考办法使用软件修改 config.plist ，将启动项隐藏。（仅限黑苹果用户）(不推荐) 使用 clover configurator 软件，挂载分区 修改 引导界面 设置 添加一条记录，参照值为你在开机时看到的选项名称。 保存设置。 进入系统，删除更新安装文件（白苹果适用）（推荐） 打开终端软件（打开方法见：点我查看） 输入如下指令删除 更新文件夹 1sudo rm -r /\"Macos install data\" 中间需要输入密码，密码不显示。 如果提示文件夹不存在，就使用 ls / 指令查看一下根目录，有一个类似上面名称的文件夹，再输入上面的指令，替换成正确的文件夹名称执行即可。 总结 无论白苹果还是黑苹果，在更新之前都应该使用时间机器做好备份，避免意外情况发生导致数据丢失！ 可能用到的软件CloverConfigur5630","link":"/Mac/tips/Mac%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%E6%80%8E%E4%B9%88%E5%BD%93%E5%81%9A%E4%BB%80%E4%B9%88%E9%83%BD%E6%B2%A1%E6%9C%89%E5%8F%91%E7%94%9F%E8%BF%87.html"},{"title":"Mac小技巧：去掉更新设置小红点","text":"Mac 系统是苹果家的产品，自然而然地继承了苹果系列的一些“优点”，比如无时不刻在提醒着你更新，像是催命一样的提醒。假如我们并不想更新呢，或者已经更新了但是更新失败了怎么办？ Let’s Go! 讨厌的小红点就像下面一样 操作指南关闭系统的更新提醒 打开设置-&gt;软件更新-&gt;高级-&gt;取消所有勾选 ☑️ 如下： 取消掉所有选项后，就不会自动检查更新，也不会提示你更新了。 关闭小红点 打开启动台 直接输入 ter 搜索终端软件 打开终端工具，输入如下的指令到终端 1defaults write com.apple.systempreferences AttentionPrefBundleIDs 0 重启 Dock （可选） 这个操作可以快速见效，就是桌面底部的 Dock 不再显示小红点。 1killall Dock //注意大小写 终极消除办法：重启电脑。将在设置界面也去掉小红点，只要不点开更新，一直有效。 相关指令输入参考： 最终效果如下：","link":"/Mac/tips/Mac%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%9A%E5%8E%BB%E6%8E%89%E6%9B%B4%E6%96%B0%E8%AE%BE%E7%BD%AE%E5%B0%8F%E7%BA%A2%E7%82%B9.html"},{"title":"“Markdown编辑器语法指南”","text":"Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 Tips: 本文仅方便自己学习作保存之用，点我阅读原文 Markdown 编辑器语法指南基本技巧代码如果你只想高亮语句中的某个函数名或关键字，可以使用 function_name() 实现 通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 ````` 包裹一段代码，并指定一种语言 12345```javascript$(document).ready(function () { alert('hello world');});``` 支持的语言：1c, abnf, accesslog, actionscript, ada, apache, applescript, arduino, armasm, asciidoc, aspectj, autohotkey, autoit, avrasm, awk, axapta, bash, basic, bnf, brainfuck, cal, capnproto, ceylon, clean, clojure, clojure-repl, cmake, coffeescript, coq, cos, cpp, crmsh, crystal, cs, csp, css, d, dart, delphi, diff, django, dns, dockerfile, dos, dsconfig, dts, dust, ebnf, elixir, elm, erb, erlang, erlang-repl, excel, fix, flix, fortran, fsharp, gams, gauss, gcode, gherkin, glsl, go, golo, gradle, groovy, haml, handlebars, haskell, haxe, hsp, htmlbars, http, hy, inform7, ini, irpf90, java, javascript, json, julia, kotlin, lasso, ldif, leaf, less, lisp, livecodeserver, livescript, llvm, lsl, lua, makefile, markdown, mathematica, matlab, maxima, mel, mercury, mipsasm, mizar, mojolicious, monkey, moonscript, n1ql, nginx, nimrod, nix, nsis, objectivec, ocaml, openscad, oxygene, parser3, perl, pf, php, pony, powershell, processing, profile, prolog, protobuf, puppet, purebasic, python, q, qml, r, rib, roboconf, rsl, ruby, ruleslanguage, rust, scala, scheme, scilab, scss, smali, smalltalk, sml, sqf, sql, stan, stata, step21, stylus, subunit, swift, taggerscript, tap, tcl, tex, thrift, tp, twig, typescript, vala, vbnet, vbscript, vbscript-html, verilog, vhdl, vim, x86asm, xl, xml, xquery, yaml, zephir 也可以使用 4 空格缩进，再贴上代码，实现相同的的效果 123def g(x): yield from range(x, 0, -1)yield from range(x) 如你不需要代码高亮，可以用下面的方法禁用： 12(```)nohighlight(```) //网页解析问题，所以将(```)括起来，实际上不需要() 标题文章内容较多时，可以用标题分段： 12345678标题1======标题2-----## 大标题 ##### 小标题 ### 粗斜体123*斜体文本* _斜体文本_**粗体文本** __粗体文本__***粗斜体文本*** ___粗斜体文本___ 链接常用链接方法 12文字链接 [链接名称](http://链接网址)网址链接 &lt;http://链接网址&gt; 高级链接技巧 123456这个链接用 1 作为网址变量 [Google][1].这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].然后在文档的结尾为变量赋值（网址）[1]: http://www.google.com/[yahoo]: http://www.yahoo.com/ 列表普通无序列表 123- 列表文本前使用 [减号+空格]+ 列表文本前使用 [加号+空格]* 列表文本前使用 [星号+空格] 普通有序列表 1231. 列表前使用 [数字+空格]2. 我们会自动帮你添加数字7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3 列表嵌套 123456789101112131415161718191. 列出所有元素： - 无序列表元素 A 1. 元素 A 的有序子列表 - 前面加四个空格2. 列表里的多段换行： 前面必须加四个空格， 这样换行，整体的格式不会乱3. 列表里引用： &gt; 前面空一行 &gt; 仍然需要在 &gt; 前面加四个空格4. 列表里代码段：(```) 前面四个空格，之后按代码语法 (```) 书写(```) 或者直接空八个，引入代码块 引用普通引用 12&gt; 引用文本前使用 [大于号+空格]&gt; 折行可以不加，新起一行都要加上哦 引用里嵌套引用 1234&gt; 最外层引用&gt; &gt; 多一个 &gt; 嵌套一层引用&gt; &gt;&gt; &gt; &gt; 可以嵌套很多层 引用里嵌套列表 123&gt; - 这是引用里嵌套的一个列表&gt; - 还可以有子列表&gt; * 子列表需要从 - 之后延后四个空格开始 引用里嵌套代码块 12345&gt; 同样的，在前面加四个空格形成代码块&gt; &gt; (```)&gt; 或者使用 (```) 形成代码块&gt; (```) 图片跟链接的方法区别在于前面加了个感叹号 !，这样是不是觉得好记多了呢？ 1![图片名称](http://图片网址) 当然，你也可以像网址那样对图片网址使用变量 1234这个链接用 1 作为网址变量 [Google][1].然后在文档的结尾位变量赋值（网址）[1]: http://www.google.com/logo.png 换行如果另起一行，只需在当前行结尾加 2 个空格 12在当前行的结尾加 2 个空格 这行就会新起一行 如果是要起一个新段落，只需要空出一行即可。 分隔符如果你有写分割线的习惯，可以新起一行输入三个减号-。当前后都有段落时，请空出一行： 12345前面的段落---后面的段落 高级技巧行内 HTML 元素目前只支持部分段内 HTML 元素效果，包括 ，如 键位显示 1使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑 代码块 1使用 &lt;pre&gt;&lt;/pre&gt; 元素同样可以形成代码块 粗斜体 1&lt;b&gt; Markdown 在此处同样适用，如 *加粗* &lt;/b&gt; 符号转义如果你的描述中需要用到 markdown 的符号，比如 _ # * 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 \\_ \\# \\* 进行避免。 12\\_不想这里的文本变斜体\\_\\*\\*不想这里的文本被加粗\\*\\* 扩展支持 jsfiddle、gist、runjs、优酷视频，直接填写 url，在其之后会自动添加预览点击会展开相关内容。 1234http://{url_of_the_fiddle}/embedded/[{tabs}/[{style}]]/https://gist.github.com/{gist_id}http://runjs.cn/detail/{id}http://v.youku.com/v_show/id_{video_id}.html 公式当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如： 12345$$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}. $$$$x \\href{why-equal.html}{=} y^2 + 1$$ 同时也支持 HTML 属性，如： 12345$$ (x+1)^2 = \\class{hidden}{(x+1)(x+1)} $$$$(x+1)^2 = \\cssId{step1}{\\style{visibility:hidden}{(x+1)(x+1)}}$$","link":"/reprint/Markdown%E7%BC%96%E8%BE%91%E5%99%A8%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97.html"},{"title":"Nginx配合CDN使用源站被暴露的问题","text":"前言 CDN 即内容分发网络，CDN依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能，使用户就近获取所需的内容，降低网络阻塞，提高用户访问响应速度和命中率。 – 引用自《百度百科》 CDN不仅具有加速的效果，更重要的是，保护源站安全，隐藏真实的源站信息。 问题分析在本博客部署之后，CDN 也用上了，然而出现了奇奇怪怪的问题。比如点击菜单栏的时候，自动跳转到源站域名去了，纳尼。这怎么能忍，于是敲开了 Chrome 的开发者工具（F12 打开）。 Network 选项卡查看到如下信息: 从图中看得到的信息1request: https://sevth.com/music -&gt; response: https://xxxxxx/music/ 我们可以知道的一些事情首先，排除掉是 CDN 网络返回该状态码，一般情况下，CDN响应的内容都是根据源站的内容来响应的，不会主动响应某些内容。 然后我登录到服务查看 Nginx 日志，发现大量的 301 重定向。 这两条的记录区别就是，末尾带 / 的请求通过了，不带的被 301 重定向了，而且被重定向的地址还是绝对地址。 经过一番百度得知： Nginx主动设置301 Moved Permanently状态码只有一种情况，当用户输入了一个url地址，最后的部分是一个文件目录。比如 http://www.test.com/index, Nginx在运行过程中没有找到index这个文件，但发现了index是个目录。于是本次访问的状态码就会被设置成301 Moved Permanently。 解决问题知道了原因后，解决就简单了，让 Nginx 不返回绝对地址，返回相对地址不就行了呗。 12345server{ absolute_redirect off; // 其它配置...} 查看结果 这样就完美的解决了问题。 参考文献: Nginx默认配置导致CDN源站泄露","link":"/technology/website/Nginx%E9%85%8D%E5%90%88CDN%E4%BD%BF%E7%94%A8%E6%BA%90%E7%AB%99%E8%A2%AB%E6%9A%B4%E9%9C%B2%E7%9A%84%E9%97%AE%E9%A2%98.html"}],"tags":[{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"自制","slug":"自制","link":"/tags/%E8%87%AA%E5%88%B6/"},{"name":"计数器","slug":"计数器","link":"/tags/%E8%AE%A1%E6%95%B0%E5%99%A8/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"Mac","slug":"Mac","link":"/tags/Mac/"},{"name":"hackintosh","slug":"hackintosh","link":"/tags/hackintosh/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"deploy","slug":"deploy","link":"/tags/deploy/"},{"name":"rsync","slug":"rsync","link":"/tags/rsync/"},{"name":"Nginx","slug":"Nginx","link":"/tags/Nginx/"},{"name":"CDN","slug":"CDN","link":"/tags/CDN/"},{"name":"dark mode","slug":"dark-mode","link":"/tags/dark-mode/"},{"name":"website","slug":"website","link":"/tags/website/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"clover","slug":"clover","link":"/tags/clover/"}],"categories":[{"name":"reprint","slug":"reprint","link":"/categories/reprint/"},{"name":"develop","slug":"develop","link":"/categories/develop/"},{"name":"technology","slug":"technology","link":"/categories/technology/"},{"name":"Mac","slug":"Mac","link":"/categories/Mac/"},{"name":"javascript","slug":"develop/javascript","link":"/categories/develop/javascript/"},{"name":"website","slug":"technology/website","link":"/categories/technology/website/"},{"name":"javascript","slug":"technology/javascript","link":"/categories/technology/javascript/"},{"name":"tips","slug":"Mac/tips","link":"/categories/Mac/tips/"},{"name":"shell","slug":"technology/shell","link":"/categories/technology/shell/"}]}